apply plugin: 'com.android.application'

def releaseTime() {
    return new Date().format("yyyy_MM_dd_HHmm", TimeZone.getTimeZone("GMT+08:00"))
}
/**
 * 读取版本配置
 */
def Properties mVersionProps = getProperty();
/**
 * 读取版本名
 */
def String mVersionCode = mVersionProps['VERSION_CODE'];
/**
 * 读取版本名
 */
def String mVersionName = mVersionProps['VERSION_NAME'];
/**
 * 模式
 */
def String mModelOnline = String.valueOf(mVersionProps['MODEL_ONLINE']);
/**
 * 日志调试模式
 */
def String mModelDebug = String.valueOf(mVersionProps['MODEL_DEBUG']);
/**
 * 构建编号
 */
def String mBuildCode = String.valueOf(mVersionProps['BUILD_CODE']);
/**
 * 指定输出目录
 */
def mOutputDir = "$rootDir/outputs/build_" + releaseTime();


android {
    compileSdkVersion 26
    buildToolsVersion "26.0.0"

    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false

    signingConfigs {
        release {
            storeFile file('../docs/victor_keystore.jks')
            storePassword "android"
            keyAlias "victor"
            keyPassword "android"
            v2SigningEnabled false  //禁用v2签名方式
        }
    }

    defaultConfig {
        applicationId "com.victor.tv"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode Integer.valueOf(mVersionCode)
        versionName mVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "boolean", "MODEL_ONLINE", mModelOnline
        buildConfigField "boolean", "MODEL_DEBUG", mModelDebug
        buildConfigField "int", "BUILD_CODE", mBuildCode
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            signingConfig signingConfigs.release
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }

    //移除lint检测的error
    lintOptions {
        abortOnError false
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
        overseas {
            res.srcDirs = ["overseas/res"]
        }
    }
    // 自定义输出配置，这里我们加上APK版本号1.0
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                String typeName = variant.buildType.name;
                //只处理Rlease版本
                if ("release".equals(typeName)) {
                    // 输出apk名称为MatchGuess_v1.0_main.apk
                    def fileName = "MatchGuess_v${defaultConfig.versionName}_${releaseTime()}_${typeName}.apk"
                    output.outputFile = new File(mOutputDir, fileName)
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.0.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'

    compile project(':library')
    compile 'com.jakewharton:butterknife:7.0.1'

    compile 'com.github.Victor2018:HttpLib:v1.4'
}

/**
 * 获取构建版本
 * @return
 */
def getProperty() {
    def Properties buildProps = new Properties()
    buildProps.load(new FileInputStream(file('../docs/build.properties')))
    return buildProps;
}
/**
 * 打包成功之后
 * 输出相应的日志记录
 * 保留此次打包的记录
 * 包括版本名称
 * 构建时间
 * 提交记录等
 */
def buildLog(String output, String vName, String vCode, String buildVerCode, String modelOnline, String modelDebug) {
    File outputFile = new File(output)
    if (!outputFile.exists())
        outputFile.mkdirs()
    FileWriter fw = new FileWriter(output + File.separator + "log.txt")
    StringBuilder builder = new StringBuilder();
    builder.append("[构建时间]=" + releaseTime())
    builder.append("\r\n")
    builder.append("[版本编号]=" + vCode)
    builder.append("\r\n")
    builder.append("[版本名称]=" + vName)
    builder.append("\r\n")
    builder.append("[编译版本]=" + buildVerCode)
    builder.append("\r\n")
    builder.append("[线上环境]=" + modelOnline)
    builder.append("\r\n")
    builder.append("[调试模式]=" + modelDebug)
    fw.write(builder.toString())
    fw.flush();
    fw.close();
}
build {
    doLast {
        buildLog(mOutputDir, mVersionName, mVersionCode, mBuildCode, mModelOnline, mModelDebug)
        copy {
            from "$buildDir/outputs/mapping"
            into mOutputDir
        }
    }
}

